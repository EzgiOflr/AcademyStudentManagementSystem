Eklenen paketler:

1- Microsoft.EntityFramework.Core  ver: 5.0.14
2- Microsoft.EntityFramework.Core.SqlServer ver: 5.0.14
3- Microsoft.EntityFramework.Core.Design ver: 5.0.14
4- Microsoft.EntityFramework.Core.Tools ver: 5.0.14
5- Microsoft.AspNetCore.Identity.EntityFramework ver : 5.0.14
--app user bitti
-----------
6-AutoMapper 9.0.0 indirildi
7- AutoMapper.Extension.Microsoft.DependencyInjection 7.0.0 indirildi.

Auto Mapper 9.0.0 
AutoMapper.Extensions.Microsoft.DependencyInjection 7.0.0
Proje Detaylarý

ViewModels'e UsersAddressVM ekledik bunu entity katmanýna eklememizin sebebi her taraftan eriþilsin diye.
Normalde viewmodel oluþtururken UI katmanýna ekliyoduk sadece ekranda göstermek istediðimizde UI katmanýna ekliyoruz.
Bu projede oluþturdugumuz örnek olarak UsersAddressVM sadece ekranda göstermek için oluþturmuyoruz ayrýca bunu veritabanýna yazmak için kullanýcaz.
Yani hem UI hem Bll Hemde Dal katmaný kullanýcak ViewModeli. 

Auto Mapper 9.0.0 
AutoMapper.Extensions.Microsoft.DependencyInjection 7.0.0 kütüphanelerini projeye dahil ettik çünkü UsersAddress ve UsersAddressVM birbirleriyle eþleþtirmek için bunlarý yapýyoruz.
tek tek elimizde DTO larda yaptýgýmýz gibi örnek name=x.name falan yapýyoduk. bunlarý otomatikmen Auto Mapper kendisi yapýyor. Hani class için ve hangi ViewModel için yapcagýmýzý
projeye söylüyoruz.  

Bu iþlem için Maps classý oluþturduk ve onu profile dan kalýtým aldýk --> Maps : Profile bu þekilde 

Bu Maps sýnýfýnda constructorunda aþagýdaki iþlemleri yapýyoruz.

//UserAddress ve VM'yi birbirine dönüþtür --> CreateMap<UsersAddress, UsersAddressVM>().ReverseMap(); yapýyoruz.
ReverseMap() yapmamýzýn amacý aþagýdaki iþlemi tek seferde yapmasýdýr.
//UserAddress'ý UsersAddressesVm'ye dönüþtür
            //CreateMap<UsersAddress, UsersAddressVM>();   //DAL--> BLL

            //UsersAddressVm'ý UserAddress'ye dönüþtür
            //CreateMap<UsersAddressVM, UsersAddress>();   //PL-->BLL-->DAL

Bu iþlemlerden sonra STARTUP ' ta  Mapleme iþlemi yaptýgýmýzý bildiriyoruz. STARTUP'ta ConfigureServices içine yapýyoruz bu iþlemi 
//Mapleme eklendi.
services.AddAutoMapper(typeof(Maps));

Bu aþamadan sonra IResult yapýsýný projeye dahil ettik bunu yapmamýzýn amacý projeye ürün eklerken baþarýlý mý baþarýsýz mý bi deðer dönsün diye bunlarý yapýyoruz.
Business katmanýnda serviceler ve manager kýsýmlarýnda CRUD iþlemleri yapýlmaya baþlandý. 

var cities = _unitofWork.CityRepo.GetAll(x => !x.IsDeleted, includeEntities: "Districts"); (includeEntities: "Districts" --> bu iþlem ile join iþlemi yapýlýyor.)
ICollection<CityVM> allCities = _mapper.Map<IQueryable<City>, ICollection<CityVM>>(cities);
Bu iþlem CityGetAll için yazýldý. 

Business katmanýnda serviceler ve manager kýsýmlarý oluþturuldu.
Mail göndermek iþlemi yapmak için EmailMessage classý oluþturulduk. IEmailSender oluþturuldu. IEmailSender da Task SendMessage(); oluþturuldu. 
Task olmasýnýn sebebi asenkron þeklinde tanýmlýyoruz.


EmailSender a aþagýdaki propertyleri ekledik.
public string SenderMail => _configuration.GetSection("EmailOptions:SenderMail").Value;
        public string Password => _configuration.GetSection("EmailOptions:Password").Value;
        public string Smtp => _configuration.GetSection("EmailOptions:Smtp").Value;
        public int SmtpPort => Convert.ToInt32(_configuration.GetSection("EmailOptions:SmtpPort").Value);

        bu propertyleri aþagýdaki bilgilerle almýþ oluyoruz. ve bunlarý sendmessage içinde dolduruyoruz.

EmailSender'a private readonly IConfiguration _configuration; ekledik. çünkü appsettings' e 
 
 "EmailOptions": {
    "SenderMail": "303asms@gmail.com",
    "Password": "ezgi was here",
    "Smtp": "smtp.gmail.com",
    "SmtpPort": "587"
  },
  "ProjectManagers": {
    "Email": "betulaksan1992@gmail.com"

  }

  bunlarý ekledik ve EmailSender içindeki SendMessage içinde _configuration metoduyla burdaki bilgileri çekebileceðiz.
  SendMessage içinde mail iþlemlerini yaptýk.

 IStudentBusinessEngine ve StudentBusinessEngine projeye dahil ettik. Bu serviceler için StudentVm oluþturduk.
 çünkü ilerde ekranda Studentle alakalý bilgiler  görmek isteyeceðimiz durumda bu ViewModelden bu bilgileri almýþ olucaz.
 Bu StudentBusinesEngine yani manager kýsmýndada  da mapper iþlemi yapýyoruz. Bu iþlem bize gelen iþlemleri otomatik olarak yapmamýzý saðlýyor.
 Mesela name=studen.name gibi iþlemleri biz yapýyoduk þimdi mapper yapýyor.
 

 RegisterViewModel oluþturduk bunu oluþturmamýzýn sebebi UI Katmaný Business katmanýný görüyor.
 Biz Repolarýmýzý DataAccess katmanýnda yaptýgýmýz için ordaki verilere ulaþamýyoruz. 
 Bu sebepten dolayý Controllarda herþeyi ViewModeller üzerinden yapýyoruz. 
 Repolarýmýz Business katmanýnda olsaydý ViewModeller üzerinden deðil direk Entityler üzerinde gidicektik.

 Bu RegisterViewModel kullanarak Register iþlemi için public async Task<IActionResult> Register(RegisterViewModel model) yapýyoruz. 
 Async yapmamýzýn sebebi asenkron olmasýný istediðimiz için.

Login iþlemi yapýldý.
login iþlemi için loginviewmodel oluþturuldu.LoginViewModel' e bize lazým olan propertyler yazýldý ve Login iþleminin post kýsmýnda bu view modele göre yapýyoruz.
 